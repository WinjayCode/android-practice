plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'kotlin-parcelize'
}

android {
    compileSdkVersion 33

    defaultConfig {
        applicationId "com.winjay.practice"
        minSdkVersion 29
        targetSdkVersion 33
        versionCode 1
        versionName "1.0.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true

        ndk {
            //Android目前支持7种ABIs：mips, mips64, x86, x86_64, arm64-v8a, armeabi, armeabi-v7a
            //arm64-v8a: 第8代、64位ARM处理器，目前主流版本。
            //armeabi-v7a: 第7代及以上的 ARM 处理器，2011年15月以后的生产的大部分Android设备，现在以arm64-v8a为多。
            //armeabi: 第5代、第6代的ARM处理器，早期的手机用的比较多，可以兼容所有ARM设备，速度比较慢。
            //x86/x86_64: 平板、模拟器用得比较多，x86 架构的手机都会包含由 Intel 提供的称为 Houdini 的指令集动态转码工具，实现对 arm .so 的兼容，而且目前 x86市场占有率很低，可能只有1%，所以x86相关的两个so文件是可以忽略的。
            //mips/mips64: NDK 以前支持 ARMv5 (armeabi) 以及 32 位和 64 位 MIPS，但 NDK r17 已不再支持，极少用于手机，可以忽略。
            // 适配指定CPU架构（配合Application.mk中APP_ABI配置一起约束指定架构）
//            abiFilters 'arm64-v8a'
        }

        externalNativeBuild {
            cmake {
                cppFlags ''
            }
        }

        javaCompileOptions {
            annotationProcessorOptions {
                // room 构建需要
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }

    // ndkBuild方式
//    externalNativeBuild {
//        ndkBuild {
//            path 'src/main/jni/Android.mk'
//        }
//    }

    // cmake方式
    externalNativeBuild {
        cmake {
            path file('src/main/cpp/CMakeLists.txt')
            version '3.10.2'
        }
    }

    signingConfigs {
        release {
            storeFile file('../keystore/winjayappkeystore')
            storePassword 'winjayandroid'
            keyPassword 'winjayandroid'
            keyAlias 'winjayappkeystore'
            // 同时使用v1和v2签名方式
//            v1SigningEnabled true
//            v2SigningEnabled true
        }

        debug {
            storeFile file('../keystore/winjayappkeystore')
            storePassword 'winjayandroid'
            keyPassword 'winjayandroid'
            keyAlias 'winjayappkeystore'
            // 同时使用v1和v2签名方式
//            v1SigningEnabled true
//            v2SigningEnabled true
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }

        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//            signingConfig signingConfigs.debug

            // 如果您收到 java.lang.NoClassDefFoundError，则必须使用构建类型中的 multiDexKeepFile 或
            // multiDexKeepProguard 属性声明这些其他类，以手动将这些类指定为主要 DEX 文件中的必需类。如果在
            // multiDexKeepFile 或 multiDexKeepProguard 文件中匹配了某个类，则会将该类添加到主要 DEX 文件。
            multiDexKeepFile file('multidex-config.txt')
            multiDexKeepProguard file('multidex-config.pro')
        }
    }

    sourceSets {
        main {
            // 指定JNI代码目录（jni为studio默认识别目录）
            jni.srcDirs = ['src/main/jni']
            // 指定jni库的存放位置（jniLibs为studio默认识别目录）
            jniLibs.srcDirs = ['src/main/jniLibs']
            // src/main/java路径下的代码需要引用src/main/aidl路径下的代码时，需要以下三项配置
            aidl.srcDirs = ['src/main/aidl']
            java.srcDirs = ['src/main/java', 'src/main/aidl']
            resources.srcDirs = ['src/main/java', 'src/main/aidl']
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {//设置编译的lint开关，程序在build的时候，会执行lint检查，有任何的错误或者警告提示，都会终止构建
        abortOnError false
    }

    buildFeatures {
        viewBinding true
        dataBinding true
    }

    viewBinding {
        enabled = true
    }

    packagingOptions {
        resources.excludes.add("META-INF/*")
    }

    // 差异化、多渠道打包
    /*flavorDimensions "channel"
    productFlavors {
        // 产品A
        A {
            // 维度
            dimension "channel"
            //程序包名
            applicationId "com.winjay.practice"
            //不同渠道号
            manifestPlaceholders = [UMC: "product-A"]
            //versionName
            versionName "1.0.0"
            //versionCode
            versionCode 1
        }
        // 产品B
        B {
            // 维度
            dimension "channel"
            //程序包名
            applicationId "com.winjay.practice"
            //不同渠道号
            manifestPlaceholders = [UMC: "product-B"]
            //versionName
            versionName "1.0.0"
            //versionCode
            versionCode 1
        }
    }*/
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // unit test
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    // androidx.media (Deprecated?)
    implementation "androidx.media:media:1.6.0"

    // androidx.media3 (no release version!)
    def media3_version = "1.0.0-rc01"
    // For exposing and controlling media sessions
    implementation "androidx.media3:media3-session:$media3_version"

    // appcompat
    implementation 'androidx.appcompat:appcompat:1.5.1'

    // activity
    implementation 'androidx.activity:activity-ktx:1.6.0'

    // multidex
    implementation 'androidx.multidex:multidex:2.0.1'

    // constraintlayout
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'

    // cardview
    implementation 'androidx.cardview:cardview:1.0.0'

    // recyclerview
    implementation 'androidx.recyclerview:recyclerview:1.2.1'

    // material
    implementation 'com.google.android.material:material:1.6.1'

    // kotlin
    implementation 'androidx.core:core-ktx:1.9.0'
//    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
//    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.3"
//    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.4.3"

    // Worker
    implementation 'androidx.work:work-runtime:2.7.1'

    // CameraX 核心库
    // camerax
    def camerax_version = "1.1.0-alpha03"
    implementation "androidx.camera:camera-core:$camerax_version"
    implementation "androidx.camera:camera-camera2:$camerax_version"
    // CameraX 生命周期
    implementation "androidx.camera:camera-lifecycle:$camerax_version"
    // CameraX view 集合，比如 cameraview，preview等
    implementation "androidx.camera:camera-view:1.0.0-alpha23"
//    implementation "androidx.camera:camera-extensions:1.0.0-alpha23"

    // room
    def room_version = "2.4.3"
    implementation "androidx.room:room-runtime:$room_version"
    annotationProcessor "androidx.room:room-compiler:$room_version"
    // To use Kotlin annotation processing tool (kapt)
    kapt "androidx.room:room-compiler:$room_version"

    // exoplayer
    implementation 'com.google.android.exoplayer:exoplayer:2.18.1'

    // palette
    implementation 'androidx.palette:palette-ktx:1.0.0'

    // 指纹识别
    implementation 'androidx.biometric:biometric:1.1.0'

    // 申请权限
    implementation 'pub.devrel:easypermissions:3.0.0'

    // fastjson
    api 'com.alibaba:fastjson:1.2.72'

    // okhttp
    implementation 'com.squareup.okhttp3:okhttp:3.10.0'
    implementation 'com.squareup.okhttp3:mockwebserver:3.10.0'
    implementation "com.squareup.okhttp3:logging-interceptor:3.3.1"

    // WebSocket
    implementation "org.java-websocket:Java-WebSocket:1.5.3"

    // retrofit
    implementation "com.squareup.retrofit2:retrofit:2.9.0"
    implementation "com.squareup.retrofit2:converter-gson:2.1.0"

    //retrofit moshi
    implementation "com.squareup.retrofit2:converter-moshi:2.6.2"
    //moshi used KotlinJsonAdapterFactory
    implementation "com.squareup.moshi:moshi-kotlin:1.9.3"

    //    implementation project(':ioclibrary')

    // butterknife
    implementation 'com.jakewharton:butterknife:10.2.1'
    kapt 'com.jakewharton:butterknife-compiler:10.2.1'

    // glide
    implementation 'com.github.bumptech.glide:glide:4.8.0'
    kapt 'com.github.bumptech.glide:compiler:4.8.0'

    // winjay-bind
    implementation project(':winjay-bind')
    implementation project(':winjay-annotations')
    kapt project(':winjay-compiler')

    // winjay-imageloader
    implementation project(':winjay-imageloader')

    // 拼图游戏
    implementation project(':puzzle')
    // 2048游戏
    implementation project(':game_2048')

    // dlna
    implementation project(':dlna')

    // scrcpy_android
    implementation project(':scrcpy_android')
}

repositories {
    mavenCentral()
}