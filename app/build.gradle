apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'

def rootDependencies = rootProject.ext.dependencies
def rootAndroid = rootProject.ext.android
def rootVersions = rootProject.ext.versions

android {
    compileSdkVersion rootAndroid.compileSdkVersion

    defaultConfig {
        applicationId rootProject.ext.applicationId
        minSdkVersion rootAndroid.minSdkVersion
        targetSdkVersion rootAndroid.targetSdkVersion
        versionCode rootVersions.versionCode
        versionName rootVersions.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        multiDexEnabled true
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['src/main/jniLibs']
            // src/main/java路径下的代码需要引用src/main/aidl路径下的代码时，需要以下三项配置
            aidl.srcDirs = ['src/main/aidl']
            java.srcDirs = ['src/main/java', 'src/main/aidl']
            resources.srcDirs = ['src/main/java', 'src/main/aidl']
        }
    }

    compileOptions {
        sourceCompatibility rootAndroid.sourceCompatibility
        targetCompatibility rootAndroid.targetCompatibility
    }

    lintOptions {//设置编译的lint开关，程序在buid的时候，会执行lint检查，有任何的错误或者警告提示，都会终止构建
        abortOnError false
    }

    dataBinding {
        enabled = true
    }

    // 差异化、多渠道打包
    flavorDimensions "channel"
    productFlavors {
        // 产品A
        A {
            // 维度
            dimension "channel"
            //程序包名
            applicationId rootProject.ext.applicationId
            //不同渠道号
            manifestPlaceholders = [UMC: "product-A"]
            //versionName
            versionName rootVersions.versionName
            //versionCode
            versionCode rootVersions.versionCode
        }
        // 产品B
        B {
            // 维度
            dimension "channel"
            //程序包名
            applicationId rootProject.ext.applicationId
            //不同渠道号
            manifestPlaceholders = [UMC: "product-B"]
            //versionName
            versionName rootVersions.versionName
            //versionCode
            versionCode rootVersions.versionCode
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation rootDependencies.appcompat_androidx
    implementation rootDependencies.constraint_layout
    testImplementation rootDependencies.junit
    androidTestImplementation rootDependencies.runner
    androidTestImplementation rootDependencies.espresso_core
    implementation rootDependencies.cardview

    // kotlin
    implementation rootDependencies.kotlin_stdlib_jdk7

    // butterknife
    implementation rootDependencies.butterknife
    annotationProcessor rootDependencies.butterknife_compiler

    // 指纹识别
    api project(':biometricprompt')

    // 申请权限
    implementation rootDependencies.permission

    // fastjson
    api rootDependencies.fastjson

    implementation project(':ioclibrary')

    // okhttp
    implementation rootDependencies.okhttp
    implementation rootDependencies.mockwebserver
    implementation rootDependencies.logging_interceptor

    // retrofit
    implementation rootDependencies.retrofit
    implementation rootDependencies.converter_gson
}

repositories {
    mavenCentral()
}


//project.afterEvaluate {
//    Task assembleReleaseTask = project.tasks.findByPath("assembleRelease")
//    if (assembleReleaseTask != null) {
//        assembleReleaseTask.doLast {
//            println("hahahah")
////            project.rootProject.findProject("kui_pad").tasks.findByPath("assembleDebug").execute()
//
//            project.rootProject.findProject("kui_pad").exec {
////                commandLine 'gradle', 'assembleDebug'
//                executable = 'gradle'
//                args += 'assembleDebug'
//            }
//        }
//    }
//}